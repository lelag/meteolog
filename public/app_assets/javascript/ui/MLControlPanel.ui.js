/*
 * File: MLControlPanel.ui.js
 * Date: Fri Dec 16 2011 23:42:50 GMT+0100 (CET)
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be auto-generated each and everytime you export.
 *
 * Do NOT hand edit this file.
 */

MLControlPanelUi = Ext.extend(Ext.Panel, {
    height: 40,
    layout:'hbox',
    layoutConfig: {
        align:'middle'
    },

    mustStopNow: false,
    currentSliderPos : 0,
    maxSliderPos : 6,
    delay: 500,

    //width: 100,
    //style: "border-bottom: 100px;",

    initComponent: function() {
        var me = this;
        Ext.applyIf(this, {
            frame:true,
            items: [{
                  xtype:'button',
                  text:'Play',
                  width:50,
                  style:'padding-right:10px',
                  iconCls:'control-play',
                  handler: this.startPlayBack,
                  ref:'start_button',
                  scope: this
                },{
                  xtype:'button',
                  iconCls:'control-stop',
                  disabled:true,
                  handler: this.stopPlayBack,
                  ref:'stop_button',
                  scope: this
                },
                {
                    xtype: 'slider',
                    id:'slider',
                    height: 40,
                    value: 0,
                    increment: 1,
                    minValue: 0,
                    maxValue: 6,
                    flex: 10,
                    ref: 'slider',
                    listeners: {
                      change: function(s, n, o) {
                        me.currentSliderPos = n;
                        me.fireEvent('slider_change', s, n, o);
                      }
                    }
                }
            ]
        });

        MLControlPanelUi.superclass.initComponent.call(this);
        this.addEvents('slider_change');
    },
    startPlayBack : function(button) {
      var me = this;
      if(this.slider.getValue() == me.maxSliderPos) {
        this.slider.setValue(0);
      }
      this.start_button.disable();
      this.stop_button.enable();

      setTimeout(function() {
        me.animStep(me);
      }, this.delay);
    },
    animStep : function(me) {
        if(!me)
          var me = this;
        if(me.slider.getValue() < me.maxSliderPos && !me.mustStopNow) {
          me.slider.setValue(me.slider.getValue() + 1);
          setTimeout(function() {
            me.animStep(me);       
          }, me.delay);
        } else {
          me.mustStopNow = false; 
          me.start_button.enable();
          me.stop_button.disable();
        }
    },
    stopPlayBack : function(button) {
      this.mustStopNow = true;
      this.start_button.enable();
      this.stop_button.disable();
    },
    setSlider : function(i) {
      this.slider.setValue(i);
    },
    resetSlider : function(max) {
      var slider = this.slider;
      this.maxSliderPos = max;
      slider.setMinValue(0);
      slider.setMaxValue(max);
      slider.setValue(0);
    }
});
